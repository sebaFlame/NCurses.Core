using System;

using NCurses.Core.Interop.SafeHandles;

namespace NCurses.Core.Interop
{
    public interface INCursesWrapper
    {
        //int COLOR_PAIR(int n);
        int COLOR_PAIR(int pair);
        //PAIR_NUMBER(attrs);
        int PAIR_NUMBER(uint attrs);
        IntPtr _nc_screen_of(WindowBaseSafeHandle window);
        bool _nc_unicode_locale();
        //int assume_default_colors(int fg, int bg);
        int assume_default_colors(int fg, int bg);
        //int assume_default_colors_sp(SCREEN* sp, int fg, int bg);
        int assume_default_colors_sp(IntPtr screen, int fg, int bg);
        //int attroff(int attrs);
        int attroff(int attrs);
        //int attron(int attrs);
        int attron(int attrs);
        //int attrset(int attrs);
        int attrset(int attrs);
        //int baudrate(void);
        int baudrate();
        //int baudrate_sp(SCREEN* sp);
        int baudrate_sp(IntPtr screen);
        //int beep(void);
        int beep();
        //int beep_sp(SCREEN* sp);
        int beep_sp(IntPtr screen);
        //bool can_change_color(void);
        bool can_change_color();
        //bool can_change_color_sp(SCREEN* sp);
        bool can_change_color_sp(IntPtr screen);
        //int cbreak(void);
        int cbreak();
        //int cbreak_sp(SCREEN* sp);
        int cbreak_sp(IntPtr screen);
        //int clear(void);
        int clear();
        //int clearok(WINDOW *win, bool bf);
        int clearok(WindowBaseSafeHandle window, bool bf);
        //int clrtobot(void);
        int clrtobot();
        //int clrtoeol(void);
        int clrtoeol();
        //int color_content(short color, short *r, short *g, short *b);
        int color_content(short color, ref short red, ref short green, ref short blue);
        //int color_content_sp(SCREEN* sp, short color, short *r, short *g, short *b);
        int color_content_sp(IntPtr screen, short color, ref short red, ref short green, ref short blue);
        //int extended_color_content(int color, int *r, int *g, int *b);
        int extended_color_content(int color, out int r, out int g, out int b);
        //int color_set(short pair, void* opts);
        int color_set(short pair, IntPtr opts);
        //int copywin(const WINDOW *srcwin, WINDOW *dstwin, int sminrow, int smincol, int dminrow, int dmincol, int dmaxrow, int dmaxcol, int overlay);
        int copywin(WindowBaseSafeHandle srcwin, WindowBaseSafeHandle dstwin, int sminrow, int smincol, int dminrow, int dmincol, int dmaxrow, int dmaxcol, int overlay);
        //int curs_set(int visibility);
        int curs_set(int visibility);
        //int curs_set_sp(SCREEN* sp, int visibility);
        int curs_set_sp(IntPtr screen, int visibility);
        //int def_prog_mode(void);
        int def_prog_mode();
        //int def_prog_mode_sp(SCREEN* sp);
        int def_prog_mode_sp(IntPtr screen);
        //int def_shell_mode(void);
        int def_shell_mode();
        //int def_shell_mode_sp(SCREEN* sp);
        int def_shell_mode_sp(IntPtr screen);
        //int delay_output(int ms);
        int delay_output(int ms);
        //int delay_output_sp(SCREEN* sp, int ms);
        int delay_output_sp(IntPtr screen, int ms);
        //int delch(void);
        int delch();
        //int deleteln(void);
        int deleteln();
        //void delscreen(SCREEN* sp);
        void delscreen(IntPtr screen);
        //int delwin(WINDOW *win);
        int delwin(IntPtr window);
        //WINDOW *derwin(WINDOW *orig, int nlines, int ncols, int begin_y, int begin_x);
        NewWindowSafeHandle derwin(WindowBaseSafeHandle window, int nlines, int ncols, int begin_y, int begin_x);
        //int doupdate(void);
        int doupdate();
        //int doupdate_sp(SCREEN* sp);
        int doupdate_sp(IntPtr screen);
        //WINDOW *dupwin(WINDOW *win);
        NewWindowSafeHandle dupwin(WindowBaseSafeHandle window);
        //int echo(void);
        int echo();
        //int echo(SCREEN* sp);
        int echo_sp(IntPtr screen);
        //int endwin(void);
        int endwin();
        //int endwin_sp(SCREEN* sp);
        int endwin_sp(IntPtr screen);
        //int erase(void);
        int erase();
        //void filter(void);
        void filter();
        //void filter_sp(SCREEN* sp);
        void filter_sp(IntPtr screen);
        //int flash(void);
        int flash();
        //int flash_sp(SCREEN* sp);
        int flash_sp(IntPtr screen);
        //int flushinp(void);
        int flushinp();
        //int flushinp_sp(SCREEN* sp);
        int flushinp_sp(IntPtr screen);

        int get_escdelay();
        int get_escdelay_sp(IntPtr screen);

        //int getattrs(WINDOW *win);
        int getattrs(WindowBaseSafeHandle window);
        //int getbegx(WINDOW* win);
        int getbegx(WindowBaseSafeHandle window);
        //int getbegy(WINDOW *win);
        int getbegy(WindowBaseSafeHandle window);
        //int getch(void);
        int getch();
        //int getcurx(WINDOW *win);
        int getcurx(WindowBaseSafeHandle window);
        //int getcury(WINDOW *win);
        int getcury(WindowBaseSafeHandle window);
        //int getmaxx(WINDOW *win);
        int getmaxx(WindowBaseSafeHandle window);
        //int getmaxy(WINDOW *win);
        int getmaxy(WindowBaseSafeHandle window);
        //int getparx(WINDOW *win);
        int getparx(WindowBaseSafeHandle window);
        //int getpary(WINDOW *win);
        int getpary(WindowBaseSafeHandle window);
        //int halfdelay(int tenths);
        int halfdelay(int tenths);
        //int halfdelay_sp(SCREEN* sp, int tenths);
        int halfdelay_sp(IntPtr screen, int tenths);
        //bool has_colors(void);
        bool has_colors();
        //bool has_colors(SCREEN* sp);
        bool has_colors_sp(IntPtr screen);
        //bool has_ic(void);
        bool has_ic();
        //bool has_ic(SCREEN* sp);
        bool has_ic_sp(IntPtr screen);
        //bool has_il(void);
        bool has_il();
        //bool has_il_sp(SCREEN* sp);
        bool has_il_sp(IntPtr screen);
        //int has_key(int ch);
        bool has_key(int ch);
        //bool has_mouse(void);
        bool has_mouse();
        //bool has_mouse_sp(SCREEN* sp);
        bool has_mouse_sp(IntPtr screen);
        //void idcok(WINDOW *win, bool bf);
        void idcok(WindowBaseSafeHandle window, bool bf);
        //int idlok(WINDOW *win, bool bf);
        int idlok(WindowBaseSafeHandle window, bool bf);
        //void immedok(WINDOW *win, bool bf);
        void immedok(WindowBaseSafeHandle window, bool bf);
        //int init_color(short color, short r, short g, short b);
        int init_color(short color, short r, short g, short b);
        //int init_color_sp(SCREEN* sp, short color, short r, short g, short b);
        int init_color_sp(IntPtr screen, short color, short r, short g, short b);
        //int init_extended_color(int color, int r, int g, int b);
        int init_extended_color(int color, int r, int g, int b);
        //int init_pair(short pair, short f, short b);
        int init_pair(short pair, short f, short b);
        //int init_pair_sp(SCREEN* sp, short pair, short f, short b);
        int init_pair_sp(IntPtr screen, short pair, short f, short b);
        //int init_extended_pair(int pair, int f, int b);
        int init_extended_pair(int pair, int f, int b);
        //WINDOW *initscr(void);
        StdScrSafeHandle initscr();
        //int insdelln(int n);
        int insdelln(int n);
        //int insertln(void);
        int insertln();
        //int intrflush(WINDOW *win, bool bf);
        int intrflush(IntPtr windows, bool bf);
        //int intrflush_sp(SCREEN* sp, WINDOW *win, bool bf);
        int intrflush_sp(IntPtr screen, WindowBaseSafeHandle windows, bool bf);
        //bool is_cleared(const WINDOW *win);
        bool is_cleared(WindowBaseSafeHandle window);
        //bool is_idcok(const WINDOW *win);
        bool is_idcok(WindowBaseSafeHandle window);
        //bool is_idlok(const WINDOW *win);
        bool is_idlok(WindowBaseSafeHandle window);
        //bool is_immedok(const WINDOW *win);
        bool is_immedok(WindowBaseSafeHandle window);
        //bool is_keypad(const WINDOW *win);
        bool is_keypad(WindowBaseSafeHandle window);
        //bool is_leaveok(const WINDOW *win);
        bool is_leaveok(WindowBaseSafeHandle window);
        //bool is_linetouched(WINDOW *win, int line);
        bool is_linetouched(WindowBaseSafeHandle window, int line);
        //bool is_nodelay(const WINDOW *win);
        bool is_nodelay(WindowBaseSafeHandle window);
        //bool is_notimeout(const WINDOW *win);
        bool is_notimeout(WindowBaseSafeHandle window);
        //bool is_pad(const WINDOW *win);
        bool is_pad(WindowBaseSafeHandle window);
        //bool is_scrollok(const WINDOW *win);
        bool is_scrollok(WindowBaseSafeHandle window);
        //bool is_subwin(const WINDOW *win);
        bool is_subwin(WindowBaseSafeHandle window);
        //bool is_syncok(const WINDOW *win);
        bool is_syncok(WindowBaseSafeHandle window);
        //bool is_term_resized(int lines, int columns);
        bool is_term_resized(int lines, int columns);
        //bool is_term_resized_sp(SCREEN* sp, int lines, int columns);
        bool is_term_resized_sp(IntPtr screen, int lines, int columns);
        //bool is_wintouched(WINDOW *win);
        bool is_wintouched(WindowBaseSafeHandle window);
        //bool isendwin(void);
        bool isendwin();
        //bool isendwin_sp(SCREEN* sp);
        bool isendwin_sp(IntPtr screen);
        //int keyok(int keycode, bool enable);
        int keyok(int keycode, bool enable);
        //int keyok_sp(SCREEN* sp, int keycode, bool enable);
        int keyok_sp(IntPtr screen, int keycode, bool enable);
        //int keypad(WINDOW *win, bool bf);
        int keypad(WindowBaseSafeHandle window, bool bf);
        //int leaveok(WINDOW *win, bool bf);
        int leaveok(WindowBaseSafeHandle window, bool bf);
        //int meta(WINDOW *win, bool bf);
        int meta(WindowBaseSafeHandle windows, bool bf);
        //bool mouse_trafo(int* pY, int* pX, bool to_screen);
        bool mouse_trafo(ref int pY, ref int pX, bool to_screen);
        //int mouseinterval(int erval);
        int mouseinterval(int erval);
        //int mouseinterval_sp(SCREEN* sp, int erval);
        int mouseinterval_sp(IntPtr screen, int erval);
        //int move(int y, int x);
        int move(int y, int x);
        //int mvcur(int oldrow, int oldcol, int newrow, int newcol);
        int mvcur(int oldrow, int oldcol, int newrow, int newcol);
        //int mvcur_sp(SCREEN* sp, int oldrow, int oldcol, int newrow, int newcol);
        int mvcur_sp(IntPtr screen, int oldrow, int oldcol, int newrow, int newcol);
        //int mvdelch(int y, int x);
        int mvdelch(int y, int x);
        //int mvderwin(WINDOW *win, int par_y, int par_x);
        int mvderwin(WindowBaseSafeHandle window, int par_y, int par_x);
        //int mvgetch(int y, int x);
        int mvgetch(int y, int x);
        //int mvwdelch(WINDOW *win, int y, int x);
        int mvwdelch(WindowBaseSafeHandle window, int y, int x);
        //int mvwgetch(WINDOW *win, int y, int x);
        int mvwgetch(WindowBaseSafeHandle window, int y, int x);
        //int mvwin(WINDOW *win, int y, int x);
        int mvwin(WindowBaseSafeHandle windows, int y, int x);
        //int napms(int ms);
        int napms(int ms);
        //int napms_sp(SCREEN* sp, int ms);
        int napms_sp(IntPtr screen, int ms);

        IntPtr new_prescr();

        //WINDOW *newpad(int nlines, int ncols);
        NewWindowSafeHandle newpad(int nlines, int ncols);
        //WINDOW *newpad_sp(SCREEN* sp, int nlines, int ncols);
        NewWindowSafeHandle newpad_sp(IntPtr screen, int nlines, int ncols);
        //WINDOW *newwin(int nlines, int ncols, int begin_y, int begin_x);
        NewWindowSafeHandle newwin(int nlines, int ncols, int begin_y, int begin_x);
        //WINDOW *newwin_sp(SCREEN* sp, int nlines, int ncols, int begin_y, int begin_x);
        NewWindowSafeHandle newwin_sp(IntPtr screen, int nlines, int ncols, int begin_y, int begin_x);
        //int nl(void);
        int nl();
        //int nl_sp(SCREEN* sp);
        int nl_sp(IntPtr screen);
        //int nocbreak(void);
        int nocbreak();
        //int nocbreak_sp(SCREEN* sp);
        int nocbreak_sp(IntPtr screen);
        //int nodelay(WINDOW *win, bool bf);
        int nodelay(WindowBaseSafeHandle window, bool bf);
        //int noecho(void);
        int noecho();
        //int noecho_sp(SCREEN* sp);
        int noecho_sp(IntPtr screen);
        //void nofilter(void);
        void nofilter();
        //void nofilter_sp(SCREEN* sp);
        void nofilter_sp(IntPtr screen);
        //int nonl(void);
        int nonl();
        //int nonl_sp(SCREEN* sp);
        int nonl_sp(IntPtr screen);
        //void noqiflush(void);
        void noqiflush();
        //void noqiflush_sp(SCREEN* sp);
        void noqiflush_sp(IntPtr screen);
        //int noraw(void);
        int noraw();
        //int noraw_sp(SCREEN* sp);
        int noraw_sp(IntPtr screen);
        //int notimeout(WINDOW *win, bool bf);
        int notimeout(WindowBaseSafeHandle window, bool bf);
        //int overlay(const WINDOW *srcwin, WINDOW *dstwin);
        int overlay(WindowBaseSafeHandle srcWin, WindowBaseSafeHandle destWin);
        //int overwrite(const WINDOW *srcwin, WINDOW *dstwin);
        int overwrite(WindowBaseSafeHandle srcWin, WindowBaseSafeHandle destWin);
        //int pair_content(short pair, short *f, short *b);
        int pair_content(short pair, out short fg, out short bg);
        //int pair_content_sp(SCREEN* sp, short pair, short* f, short* b);
        int pair_content_sp(IntPtr screen, short pair, ref short f, ref short b);
        //int extended_pair_content(int pair, int *f, int *b);
        int extended_pair_content(int pair, out int f, out int b);
        //int pnoutrefresh(WINDOW *pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol);
        int pnoutrefresh(WindowBaseSafeHandle pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol);
        //int prefresh(WINDOW *pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol);
        int prefresh(WindowBaseSafeHandle pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol);
        //void qiflush(void);
        void qiflush();
        //void qiflush_sp(SCREEN* sp);
        void qiflush_sp(IntPtr screen);
        //int raw(void);
        int raw();
        //int raw_sp(SCREEN* sp);
        int raw_sp(IntPtr screen);
        //int redrawwin(WINDOW* win);
        int redrawwin(WindowBaseSafeHandle window);
        //int refresh(void);
        int refresh();
        //int reset_prog_mode(void);
        int reset_prog_mode();
        //int reset_prog_mode_sp(SCREEN* sp);
        int reset_prog_mode_sp(IntPtr screen);
        //int reset_shell_mode(void);
        int reset_shell_mode();
        //int reset_shell_mode_sp(SCREEN* sp);
        int reset_shell_mode_sp(IntPtr screen);
        //int resetty(void);
        int resetty();
        //int resetty_sp(SCREEN* sp);
        int resetty_sp(IntPtr screen);
        //int resize_term(int lines, int columns);
        int resize_term(int lines, int columns);
        //int resize_term_sp(SCREEN* sp, int lines, int columns);
        int resize_term_sp(IntPtr screen, int lines, int columns);
        //int resizeterm(int lines, int columns);
        int resizeterm(int lines, int columns);
        //int resizeterm_sp(SCREEN* sp, int lines, int columns);
        int resizeterm_sp(IntPtr screen, int lines, int columns);
        //int ripoffline(int line, int (*init)(WINDOW *, int));
        int ripoffline(int line, IntPtr method);
        //int ripoffline_sp(SCREEN* sp, int line, int (*init)(WINDOW *, int));
        int ripoffline_sp(IntPtr screen, int line, IntPtr method);
        //int savetty(void);
        int savetty();
        //int savetty_sp(SCREEN* sp);
        int savetty_sp(IntPtr screen);
        //int scrl(int n);
        int scrl(int n);
        //int scroll(WINDOW *win);
        int scroll(WindowBaseSafeHandle window);
        //int scrollok(WINDOW *win, bool bf);
        int scrollok(WindowBaseSafeHandle window, bool bf);

        int set_escdelay(int size);
        int set_escdelay_sp(IntPtr screen, int size);
        int set_tabsize(int size);
        int set_tabsize_sp(IntPtr screen, int size);

        //SCREEN *set_term(SCREEN *new);
        IntPtr set_term(IntPtr newScr);
        //int setscrreg(int top, int bot);
        int setscrreg(int top, int bot);
        //int slk_clear(void);
        int slk_clear();
        //int slk_clear_sp(SCREEN* sp);
        int slk_clear_sp(IntPtr screen);
        //int slk_color(short pair);
        int slk_color(short color_pair);
        //int slk_color_sp(SCREEN* sp, short pair);
        int slk_color_sp(IntPtr screen, short color_pair);
        //int slk_init(int fmt);
        int slk_init(int fmt);
        //int slk_init_sp(SCREEN* sp, int fmt);
        int slk_init_sp(IntPtr screen, int fmt);
        //int slk_noutrefresh(void);
        int slk_noutrefresh();
        //int slk_noutrefresh(SCREEN* sp);
        int slk_noutrefresh_sp(IntPtr screen);
        //int slk_refresh(void);
        int slk_refresh();
        //int slk_refresh(SCREEN* sp);
        int slk_refresh_sp(IntPtr screen);
        //int slk_restore(void);
        int slk_restore();
        //int slk_restore(SCREEN* sp);
        int slk_restore_sp(IntPtr screen);
        //int slk_touch(void);
        int slk_touch();
        //int slk_touch_sp(SCREEN* sp);
        int slk_touch_sp(IntPtr screen);
        //int standend(void);
        int standend();
        //int standout(void);
        int standout();
        //int start_color(void);
        int start_color();
        //int start_color_sp(SCREEN* sp);
        int start_color_sp(IntPtr screen);
        //WINDOW *subpad(WINDOW *orig, int nlines, int ncols, int begin_y, int begin_x);
        NewWindowSafeHandle subpad(WindowBaseSafeHandle orig, int nlines, int ncols, int begin_y, int begin_x);
        //WINDOW *subwin(WINDOW *orig, int nlines, int ncols, int begin_y, int begin_x);
        NewWindowSafeHandle subwin(WindowBaseSafeHandle orig, int nlines, int ncols, int begin_y, int begin_x);
        //int syncok(WINDOW *win, bool bf);
        int syncok(WindowBaseSafeHandle window, bool bf);
        //void timeout(int delay);
        void timeout(int delay);
        //int touchline(WINDOW *win, int start, int count);
        int touchline(WindowBaseSafeHandle window, int start, int count);
        //int touchwin(WINDOW *win);
        int touchwin(WindowBaseSafeHandle window);
        //int typeahead(int fd);
        int typeahead(int fd);
        //int typeahead_sp(SCREEN* sp, int fd);
        int typeahead_sp(IntPtr screen, int fd);
        //int ungetch(int ch);
        int ungetch(int ch);
        //int ungetch_sp(SCREEN* sp, int ch);
        int ungetch_sp(IntPtr screen, int ch);
        //int untouchwin(WINDOW *win);
        int untouchwin(WindowBaseSafeHandle window);
        //int use_default_colors(void);
        int use_default_colors();
        //int use_default_colors_sp(SCREEN* sp);
        int use_default_colors_sp(IntPtr screen);
        //void use_env(bool f);
        void use_env(bool f);
        //void use_env_sp(SCREEN* sp, bool f);
        void use_env_sp(IntPtr screen, bool f);
        //int use_extended_names(bool enable);
        int use_extended_names(bool enable);
        //int use_legacy_coding(int level);
        int use_legacy_coding(int level);
        //int use_legacy_coding_sp(SCREEN* sp, int level);
        int use_legacy_coding_sp(IntPtr screen, int level);
        //int use_screen(SCREEN *scr, NCURSES_SCREEN_CB func, void *data);
        int use_screen(IntPtr screen, IntPtr callback, IntPtr args);
        //void use_tioctl(bool f);
        void use_tioctl(bool f);
        //void use_tioctl_sp(SCREEN* sp, bool f);
        void use_tioctl_sp(IntPtr screen, bool f);
        //int use_window(WINDOW *win, NCURSES_WINDOW_CB func, void *data);
        int use_window(WindowBaseSafeHandle window, IntPtr callback, IntPtr args);
        //int wattroff(WINDOW *win, int attrs);
        int wattroff(WindowBaseSafeHandle window, int attrs);
        //int attron(int attrs);
        int wattron(WindowBaseSafeHandle window, int attrs);
        //int attrset(int attrs);
        int wattrset(WindowBaseSafeHandle window, int attrs);
        //int wclear(WINDOW *win);
        int wclear(WindowBaseSafeHandle window);
        //int wclrtobot(WINDOW *win);
        int wclrtobot(WindowBaseSafeHandle window);
        //int wclrtoeol(WINDOW *win);
        int wclrtoeol(WindowBaseSafeHandle window);
        //int wcolor_set(WINDOW *win, short pair, void* opts);
        int wcolor_set(WindowBaseSafeHandle window, short pair, IntPtr opts);
        //void wcursyncup(WINDOW *win);
        void wcursyncup(WindowBaseSafeHandle window);
        //int wdelch(WINDOW *win);
        int wdelch(WindowBaseSafeHandle window);
        //int wdeleteln(WINDOW *win);
        int wdeleteln(WindowBaseSafeHandle window);
        //bool wenclose(const WINDOW *win, int y, int x);
        bool wenclose(WindowBaseSafeHandle window, int y, int x);
        //int werase(WINDOW *win);
        int werase(WindowBaseSafeHandle window);
        //int wgetch(WINDOW *win);
        int wgetch(WindowBaseSafeHandle window);
        //int wgetdelay(const WINDOW *win);
        int wgetdelay(WindowBaseSafeHandle window);
        //WINDOW * wgetparent(const WINDOW *win);
        IntPtr wgetparent(WindowBaseSafeHandle window);
        //int wgetscrreg(const WINDOW *win, int *top, int *bottom);
        int wgetscrreg(WindowBaseSafeHandle window, ref int lines, ref int columns);
        //int winsdelln(WINDOW *win, int n);
        int winsdelln(WindowBaseSafeHandle window, int n);
        //int winsertln(WINDOW *win);
        int winsertln(WindowBaseSafeHandle window);
        //bool wmouse_trafo(const WINDOW* win, int* pY, int* pX, bool to_screen);
        bool wmouse_trafo(WindowBaseSafeHandle windows, ref int pY, ref int pX, bool to_screen);
        //int wmove(WINDOW *win, int y, int x);
        int wmove(WindowBaseSafeHandle window, int y, int x);
        //int wnoutrefresh(WINDOW *win);
        int wnoutrefresh(WindowBaseSafeHandle window);
        //int wredrawln(WINDOW *win, int beg_line, int num_lines);
        int wredrawln(WindowBaseSafeHandle window, int beg_line, int num_lines);
        //int wrefresh(WINDOW *win);
        int wrefresh(WindowBaseSafeHandle window);
        //int wresize(WINDOW *win, int lines, int columns);
        int wresize(WindowBaseSafeHandle window, int lines, int columns);
        //int wscrl(WINDOW *win, int n);
        int wscrl(WindowBaseSafeHandle window, int n);
        //int wsetscrreg(WINDOW *win, int top, int bot);
        int wsetscrreg(WindowBaseSafeHandle window, int top, int bot);
        //int wstandend(WINDOW *win);
        int wstandend(WindowBaseSafeHandle window);
        //int wstandout(WINDOW *win);
        int wstandout(WindowBaseSafeHandle window);
        //void wsyncdown(WINDOW *win);
        void wsyncdown(WindowBaseSafeHandle window);
        //void wsyncup(WINDOW *win);
        void wsyncup(WindowBaseSafeHandle window);
        //void wtimeout(WINDOW *win, int delay);
        void wtimeout(int delay);
        //int wtouchln(WINDOW *win, int y, int n, int changed);
        int wtouchln(WindowBaseSafeHandle window, int y, int n, int changed);
    }
}