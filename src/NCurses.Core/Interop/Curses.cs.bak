using System;
using System.Text;
using System.Runtime.InteropServices;

namespace NCurses.Core.Interop
{
    public struct ConsoleScreenBufferInfo
    {
        public Coord Size;
        public Coord CursorPosition;
        public short Attribute;
        public SmallRect Window;
        public Coord MaxWindowSize;
    }

    public enum Handles
    {
        STD_INPUT = -10,
        STD_OUTPUT = -11,
        STD_ERROR = -12
    }

    public static class NativeWindowsMethods
    {
        [DllImport("kernel32.dll")]
        public extern static IntPtr LoadLibrary(string libToLoad);

        [DllImport("kernel32.dll")]
        public extern static IntPtr GetProcAddress(IntPtr libHandle, string symbol);

        [DllImport("kernel32.dll")]
        public extern static bool FreeLibrary(IntPtr libHandle);

        [DllImport("kernel32.dll")]
        public extern static IntPtr GetConsoleWindow();

        [DllImport("kernel32.dll")]
        public extern static IntPtr GetStdHandle(Handles handle);

        [DllImport("kernel32.dll")]
        public extern static Coord GetLargestConsoleWindowSize(IntPtr outputHandle);

        [DllImport("kernel32.dll")]
        public extern static bool GetConsoleScreenBufferInfo(IntPtr outputHandle, out ConsoleScreenBufferInfo info);

        [DllImport("kernel32.dll")]
        public extern static bool SetConsoleScreenBufferSize(IntPtr outputHandle, Coord newSize);

        [DllImport("kernel32.dll")]
        public extern static bool SetConsoleWindowInfo(IntPtr outputHandle, bool absolute, ref SmallRect rect);

        [DllImport("kernel32.dll")]
        public extern static bool SetConsoleActiveScreenBuffer(IntPtr outputHandle);

        [DllImport("kernel32.dll")]
        public extern static bool SetCurrentConsoleFontEx(IntPtr outputHandle, bool maximumWindow, CONSOLE_FONT_INFO_EX fontInfo);

        [DllImport("kernel32.dll")]
        public extern static bool GetCurrentConsoleFontEx(IntPtr outputHandle, bool maximumWindow, ref CONSOLE_FONT_INFO_EX fontInfo);

        [DllImport("kernel32.dll")]
        public extern static uint GetNumberOfConsoleFonts();

        [DllImport("kernel32.dll")]
        public extern static bool SetConsoleFont(IntPtr outputHandle, uint fontIndex);
    }

    public static class NativeLinuxMethods
    {
        [DllImport("libdl.so")]
        public static extern IntPtr dlopen(string dllToLoad, int flags);

        [DllImport("libdl.so")]
        public static extern IntPtr dlsym(IntPtr libHandle, string symbol);

        [DllImport("libdl.so")]
        public static extern bool dlclose(IntPtr libHandle);
    }

    public static class Curses
    {
        [DllImport(Constants.DLLNAME)]
        public extern static IntPtr initscr();

        [DllImport(Constants.DLLNAME)]
        public extern static IntPtr _nc_screen_of(IntPtr window);

        [DllImport(Constants.DLLNAME)]
        public extern static uint _nc_acs_char_sp(IntPtr screen, int ch);

        [DllImport(Constants.DLLNAME)]
        public extern static bool _nc_unicode_locale();

        [DllImport(Constants.DLLNAME)]
        public extern static void _nc_init_acs();

        [DllImport(Constants.DLLNAME)]
        public extern static void _nc_init_wacs();

        [DllImport(Constants.DLLNAME, CharSet = CharSet.Unicode)]
        public extern static int _nc_mbtowc(StringBuilder result, string originalString, int byteCount);

        [DllImport(Constants.DLLNAME, CharSet = CharSet.Unicode)]
        public extern static int _nc_wctomb(StringBuilder result, string originalString);

        [DllImport(Constants.DLLNAME)]
        public extern static bool has_colors();

        public static void VerifyNCursesMethod(Delegate dlg, string methodName, params object[] arg)
        {
            object ret = dlg.DynamicInvoke(arg);
            if (ret is IntPtr)
                NCursesException.Verify((IntPtr)ret, methodName);
            else if (ret is int)
                NCursesException.Verify((int)ret, methodName);
        }

        internal static void VerifyNCursesMethod(Func<int> f, string methodName)
        {
            NCursesException.Verify(f(), methodName);
        }

        internal static void VerifyNCursesMethod(Func<IntPtr> f, string methodName)
        {
            NCursesException.Verify(f(), methodName);
        }

        [DllImport(Constants.DLLNAME)]
        public extern static int start_color();

        [DllImport(Constants.DLLNAME)]
        public extern static int use_default_colors();

        [DllImport(Constants.DLLNAME)]
        public extern static int nocbreak();

        [DllImport(Constants.DLLNAME)]
        public extern static int resize_term(int lines, int cols);

        [DllImport(Constants.DLLNAME)]
        public extern static int keypad(IntPtr window, bool keypadOn);

        [DllImport(Constants.DLLNAME)]
        public extern static int add_wch(IntPtr ch);

        [DllImport(Constants.DLLNAME)]
        public extern static int wadd_wch(IntPtr window, uint ch);

        [DllImport(Constants.DLLNAME, CharSet = CharSet.Unicode)]
        public extern static int waddwstr(IntPtr window, StringBuilder text);

        [DllImport(Constants.DLLNAME, CharSet = CharSet.Unicode)]
        public extern static int waddnstr(IntPtr window, string line, int cols);

        [DllImport(Constants.DLLNAME)]
        public extern static int wattrset(IntPtr window, uint attr);

        [DllImport(Constants.DLLNAME)]
        public extern static int wattron(IntPtr window, uint attr);

        [DllImport(Constants.DLLNAME)]
        public extern static int wattroff(IntPtr window, uint attr);

        [DllImport(Constants.DLLNAME)]
        public extern static int wcolor_set(IntPtr window, short color);

        [DllImport(Constants.DLLNAME)]
        public extern static int init_pair(short pairIndex, short fg, short bg);

        [DllImport(Constants.DLLNAME)]
        public extern static int wnoutrefresh(IntPtr window);

        //public static int wnoutrefresh_t(IntPtr window)
        //{
        //    Func<IntPtr, IntPtr, int> cb = (IntPtr w, IntPtr a) => wnoutrefresh(w);
        //    NCURSES_WINDOW_CB cbd = new NCURSES_WINDOW_CB(cb);
        //    return use_window(window, Marshal.GetFunctionPointerForDelegate(cbd), IntPtr.Zero);
        //}

        [DllImport(Constants.DLLNAME)]
        public extern static int COLOR_PAIR(int colorPair);

        [DllImport(Constants.DLLNAME)]
        public extern static int doupdate();

        [DllImport(Constants.DLLNAME)]
        public extern static int doupdate_sp(IntPtr screen);

        //public static int doupdate_sp_t(IntPtr screen)
        //{
        //    Func<IntPtr, IntPtr, int> cb = (IntPtr s, IntPtr a) => doupdate_sp(s);
        //    NCURSES_SCREEN_CB cbd = new NCURSES_SCREEN_CB(cb);
        //    return use_screen(screen, Marshal.GetFunctionPointerForDelegate(cbd), IntPtr.Zero);
        //}

        [DllImport(Constants.DLLNAME)]
        public extern static int endwin();
    }
}
